/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

class App {
    val greeting: String
        get() {
            return "Hello World!"
        }
}
sealed class List<out A> {
		companion object {
				fun <A> of(vararg aa: A): List<A> {
						val tail = aa.sliceArray(1 until aa.size)
						return if (aa.isEmpty()) Nil else Cons(aa[0], of(*tail))
				}
		}
}
object Nil : List<Nothing>()
data class Cons<out A> (val head: A, val tail: List<A>) : List<A> ()


val ints = List.of(1,2,3,4)
fun sum(xs: List<Int>): Int =
		when (xs) {
				is Nil -> 0
				is Cons -> xs.head + sum(xs.tail)
		}
fun main() {
		val result = sum(ints)
		println("sum result : " + result)
    println(App().greeting)
}
